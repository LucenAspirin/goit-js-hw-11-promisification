{"version":3,"sources":["webpack:///./js/task_01.js","webpack:///./js/task_02.js","webpack:///./js/task_03.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","logSuccess","id","amount","logError","warn","catch"],"mappings":"2JAaMA,EAAQ,SAAAC,GAKZ,OAJqB,IAAIC,SAAQ,SAACC,EAASC,GACzCC,WAAWF,EAAQ,GAAGF,GAAOA,OAM3BK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCCtBXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAQjC,OAPgB,IAAId,SAAQ,SAACC,EAASC,GAKpCD,EAJqBY,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAS7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAK7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCrBnCD,YAAW,WACTG,QAAQC,IAAR,YACC,GAEH,IAAMY,EAAkB,SAAAC,GACtB,IATiCC,EAAKC,EAShCxB,GAT2BuB,EASO,IATFC,EASO,IARtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAoBpD,OAVgB,IAAIrB,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACUoB,KAAKE,SAAW,GAGjCxB,EAAQmB,GACHlB,EAAOkB,KACbtB,OAMD4B,EAAa,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,OAExBtB,QAAQC,IAAR,kBAA8BoB,EAA9B,iBAAiDC,EAAjD,KAA6D,gBAGzDC,EAAW,SAAC,GAAiB,IAAfF,EAAe,EAAfA,GAAe,EAAXtB,KACtBC,QAAQwB,KAAR,mCACqCH,EADrC,4BAEE,cAIJR,EAAgB,CAAEQ,GAAI,GAAIC,OAAQ,MAAOpB,KAAKkB,GAAYK,MAAMF,GAEhEV,EAAgB,CAAEQ,GAAI,GAAIC,OAAQ,MAAOpB,KAAKkB,GAAYK,MAAMF,GAEhEV,EAAgB,CAAEQ,GAAI,GAAIC,OAAQ,KAAMpB,KAAKkB,GAAYK,MAAMF,GAE/DV,EAAgB,CAAEQ,GAAI,GAAIC,OAAQ,MAAOpB,KAAKkB,GAAYK,MAAMF,K","file":"main.07e62e254c4c92e59263.js","sourcesContent":["//console.log('Задание 1');\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\n// const promise = new Promise((resolve, reject) => {\r\n//   setTimeout(\r\n//     //resolve(delayTime), delayTime);\r\n//     console.log(`object`),\r\n//     2000,\r\n//   );\r\n//   resolve('Object');\r\n// });\r\n// console.log(promise);\r\n\r\nconst delay = ms => {\r\n  const delayPromise = new Promise((resolve, reject) => {\r\n    setTimeout(resolve(`${ms}`), ms);\r\n  });\r\n  //console.log(delayPromise);\r\n  return delayPromise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","// ================Задание 2=======================\r\n\r\n// Перепиши функцию toggleUserState() так, чтобы она HE использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    //console.log(updatedUsers);\r\n    resolve(updatedUsers);\r\n  });\r\n  return promise;\r\n  //callback(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger2);\r\n// toggleUserState(users, 'Lux', logger2);\r\n","// Задание 3\r\n\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nsetTimeout(() => {\r\n  console.log(`Task 3`);\r\n}, 0);\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      //console.log(transaction);\r\n      if (canProcess) {\r\n        resolve(transaction);\r\n      } else reject(transaction);\r\n    }, delay);\r\n  });\r\n\r\n  return promise;\r\n};\r\n\r\nconst logSuccess = ({ id, amount }) => {\r\n  //console.log(id, amount);\r\n  console.log(`%c Transaction ${id} processed in ${amount}ms`, 'color:green');\r\n};\r\n\r\nconst logError = ({ id, time }) => {\r\n  console.warn(\r\n    `%c Error processing transaction ${id}. Please try again later.`,\r\n    'color:red',\r\n  );\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n\r\n/*\r\n * Работало так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n"],"sourceRoot":""}